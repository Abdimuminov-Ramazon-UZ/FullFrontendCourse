/* * {
  margin: 0;
  padding: 0;
} */
/* .grid-container {
  border: 2px red solid;
  margin: 5px;
  padding: 1px;
} */
/* .grid-container {
  display: grid;
  gap: 5px;
  grid-template-columns: 100px 100px 50px;
  grid-template-columns: auto auto auto;
  grid-auto-columns: max-content; */
/* We create several rows given value to grid template columns.We enter another one value that is new row.If we give auto rows occupy  all display  of equal value.we may give value  through fraction such as 1fr 2fr adn etc.Fraction describes displays parts when we give several fraction values display separate that much part.grid template rows is similar to grid-template columns.However,we give one value to columns through grid-auto columns.grid-auto-rows isn't similar to above columns */
/* grid-template-rows: 50px 50px; */
/* grid-auto-rows: 25px; */
/* we use with justify content.If we give space evenly to justify content spaces separate from the same all items.If we give  space-around  to justify content item's between  takes wider between items than edges   */
/* justify-content: space-evenly; */
/* If we don't enter height align items doesn't work. */
/* height: 100vh; */
/* align-items: last baseline; */
/* } */

/* .grid-item { */
/* border: 1px blue solid;/ */
/* } */

/* Now,we give styles items */
/* .item1 { */
/* We give starter and finished postion this item.It starts first row and ends third row and it occupies firstand second rows position */
/* grid-column-start: 1;
  grid-column-end: 3; */
/* We enter above data simple.Given item occupies only three column because beginning  we  enter three value others put on under rows and destroy styles  but rows aren't limitted. */
/* grid-column: 1/3;
  grid-row: 2/6; */
/* } */
/* .item2 { */
/* grid-area: 2/2/2/4; */
/* shorthand for grid column and grid grid row is grid area grid-area:row-start,col-start,row-end,col-end*/
/* } */

/* .container { */
/* border: 2px red solid; */
/* display: grid; */
/* gap: 5px; */
/* grid-template-columns: 1fr 2fr 1fr;
  grid-template-rows: 1fr 10fr 1fr; */
/* padding: 10px; */
/* grid-template-areas: "n n n n" "s b b a" "s b b a" "s b b a" "s b b a" "s b b a" "s b b a" "f f f f";
  grid-template-rows: 1fr 10fr 1fr; */
/* grid-template-areas: " navbar navbar navbar navbar" "sidebar body body body" "sidebar body body ad" "footer footer footer footer"; */
/* } */
/* We use grid template areas also shorthand we create string datas such as rows and columns*/
/* .grid { */
/* border: 3px solid blue; */
/* } */
/* Navbar
.item1 {
  grid-row: 1/3;
  /* grid-row: 1/4; */
/* } */
/* Sidebar */
/* .item2 { */
/* grid-column: 2/4; */
/* grid-row: 4/6; */
/* } */
/* Content */

/* .item5 { */
/* grid-column: 1/4; */
/* } */
/* Navbar */
/* .item1 {
  grid-area: s;
  /* grid-row: 1/4; */
/* }
/* Sidebar */
/* .item2 { */
/* grid-area: n; */
/* grid-row: 4/6; */
/* } */
/* Content */
/* .item3 { */
/* grid-area: b; */
/* } */
/* .item4 { */
/* grid-area: a; */
/* } */
/* .item5 { */
/* grid-area: f; */
/* } */

/* 47-lesson */
/* .grid-container {
  display: grid;
  gap: 5px;
  border: 2px red solid;
  padding: 10px;
  grid-auto-rows: 50px;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); */
/* We enter repeat function to grid template columns.It has two value,first is number of row second is block's width.We give auto-fit to first value but empty space smaller than second value when block's size equals second value then it occupies there.It is inconvenient.If we create reponsive web site we use minmax property for second value.minmax has two value first is block's  minimum size second is maximum block's size there helps 1fr value to ours*/
/* } */
/* .grid-item {
  border: 3px solid blue;
} */
/* 48-lesson  */
/* Grid responsive */
.grid-container {
  display: grid;
  grid-gap: 5px;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  grid-auto-rows: 750px;
  grid-auto-flow: dense;
}
.horizontal {
  /* if we give span and number to grid column it two times bigger than others  */
  grid-column: span 2;
}
.vertical {
  grid-row: span 2;
}
.big {
  grid-column: span 2;
  grid-row: span 2;
}
